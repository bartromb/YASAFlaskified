Here is a detailed specification of the Flask application (`app.py`), all associated files, and a comprehensive installation guide for setting it up on a vanilla Ubuntu server.

---

## **Application Overview**

### **app.py**
This is the main Flask application that:
1. **Handles User Authentication**:
   - Users can register, log in, and log out.
   - Passwords are hashed for security.
2. **Processes EEG Files**:
   - Accepts `.edf` files for sleep analysis.
   - Processes files asynchronously using RQ (Redis Queue).
   - Outputs PDFs and CSV files.
3. **Routes**:
   - `/login`: Login page.
   - `/logout`: Logs the user out.
   - `/register`: Registration page.
   - `/`: Upload files page.
   - `/processing`: Displays job statuses during processing.
   - `/results`: Shows the processed files with download links.
   - `/download/<filename>`: Serves processed files for download.
4. **Background Processing**:
   - Uses Redis and RQ workers to process files in the background.
5. **Database**:
   - Uses SQLite for user authentication.

### **File Structure**
```plaintext
myproject/
├── app.py                 # Main application script
├── config.json            # Configuration file (e.g., Redis, database paths)
├── templates/             # HTML templates
│   ├── base.html          # Base template
│   ├── login.html         # Login page
│   ├── register.html      # Registration page
│   ├── upload.html        # Upload page
│   ├── processing.html    # Processing page
│   ├── results.html       # Results page
│   └── features.html      # Features page
├── static/                # Static files
│   ├── styles.css         # CSS styles
│   ├── slaapstudie.jpeg   # Background image
│   └── favicon.ico        # Favicon
├── logs/                  # Log directory
│   └── app.log            # Application logs
├── uploads/               # Directory for uploaded files
└── processed/             # Directory for processed files
```

---

## **How to Install on a Vanilla Ubuntu Server**

### 1. **Install Prerequisites**
Ensure you have Python 3.12 or later, Redis, and other required tools.

```bash
# Update and upgrade system packages
sudo apt update && sudo apt upgrade -y

# Install Python, pip, and virtual environment tools
sudo apt install -y python3 python3-pip python3-venv

# Install Redis
sudo apt install -y redis-server

# Install other essential tools
sudo apt install -y git
```

### 2. **Setup Redis**
Enable Redis to start at boot and ensure it's running.

```bash
sudo systemctl enable redis-server
sudo systemctl start redis-server
sudo systemctl status redis-server
```

### 3. **Clone the Repository**
Clone your Flask application into `/home/bart/myproject`.

```bash
# Navigate to your home directory
cd /home/bart

# Clone your repository (replace `<repo-url>` with your Git repository URL)
git clone <repo-url> myproject

# Navigate to the project folder
cd myproject
```

### 4. **Setup Python Environment**
Create and activate a virtual environment, then install dependencies.

```bash
# Create a Python virtual environment
python3 -m venv venv

# Activate the virtual environment
source venv/bin/activate

# Install Python dependencies
pip install -r requirements.txt
```

### 5. **Setup Configuration**
Edit `config.json` to configure paths and credentials.

```json
{
  "UPLOAD_FOLDER": "/home/bart/myproject/uploads",
  "PROCESSED_FOLDER": "/home/bart/myproject/processed",
  "SECRET_KEY": "supersecretkey",
  "SQLALCHEMY_DATABASE_URI": "sqlite:///users.db",
  "LOG_FILE": "/home/bart/myproject/logs/app.log",
  "ADMIN_PASSWORD": "admin"
}
```

Ensure the required directories exist:

```bash
mkdir -p uploads processed logs
```

### 6. **Initialize the Database**
Run the following command to set up the SQLite database:

```bash
python3 app.py
```

### 7. **Configure Gunicorn and Nginx**
Set up Gunicorn to serve the application and Nginx as a reverse proxy.

#### Gunicorn Systemd Service
Create `/etc/systemd/system/myproject.service`:

```plaintext
[Unit]
Description=Gunicorn instance to serve MyProject
After=network.target

[Service]
User=bart
Group=www-data
WorkingDirectory=/home/bart/myproject
Environment="PATH=/home/bart/myproject/venv/bin"
ExecStart=/home/bart/myproject/venv/bin/gunicorn --workers 4 --bind unix:/home/bart/myproject/run/gunicorn.sock app:app

[Install]
WantedBy=multi-user.target
```

Enable and start the service:

```bash
sudo systemctl enable myproject.service
sudo systemctl start myproject.service
```

#### Nginx Configuration
Create `/etc/nginx/sites-available/myproject`:

```plaintext
server {
    listen 80;
    server_name your_server_ip_or_domain;

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/bart/myproject/run/gunicorn.sock;
    }

    location /static/ {
        alias /home/bart/myproject/static/;
    }

    location /uploads/ {
        alias /home/bart/myproject/uploads/;
    }

    location /processed/ {
        alias /home/bart/myproject/processed/;
    }
}
```

Enable the site and restart Nginx:

```bash
sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled
sudo nginx -t
sudo systemctl restart nginx
```

### 8. **Set Up RQ Workers**
Create the systemd service for RQ workers.

#### RQ Worker Service
Create `/etc/systemd/system/rq-worker@.service`:

```plaintext
[Unit]
Description=RQ Worker for MyProject
After=redis.service

[Service]
User=bart
Group=www-data
WorkingDirectory=/home/bart/myproject
Environment="PATH=/home/bart/myproject/venv/bin"
ExecStart=/home/bart/myproject/venv/bin/rq worker --with-scheduler
Restart=always

[Install]
WantedBy=multi-user.target
```

Start 4 workers:

```bash
sudo systemctl start rq-worker@1.service
sudo systemctl start rq-worker@2.service
sudo systemctl start rq-worker@3.service
sudo systemctl start rq-worker@4.service
```

Enable them to start at boot:

```bash
sudo systemctl enable rq-worker@1.service
sudo systemctl enable rq-worker@2.service
sudo systemctl enable rq-worker@3.service
sudo systemctl enable rq-worker@4.service
```

---

### 9. **Test the Application**
1. Navigate to your server's IP or domain in a browser.
2. Register, log in, upload files, and verify processing.
3. Check logs for errors: `/home/bart/myproject/logs/app.log`.

---

## **Application Features**

### **User Features**
1. **User Authentication**:
   - Secure login and logout.
   - User registration.
2. **File Upload**:
   - Upload `.edf` files for analysis.
3. **Processing Feedback**:
   - Live job status during processing.
4. **Download Results**:
   - PDFs and CSVs generated from the processing.

### **Admin Features**
1. **Logs**:
   - All activity logged in `/home/bart/myproject/logs/app.log`.
2. **Asynchronous Processing**:
   - Processes files in the background using RQ workers.

### **Technical Features**
1. **Scalability**:
   - Supports multiple workers for concurrent processing.
2. **Secure Static Serving**:
   - Nginx serves static and processed files.


